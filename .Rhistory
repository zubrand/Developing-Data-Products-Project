students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test , grade) %>%
print
submit()
extract_numeric("class5")
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class)) %>%
### Call to mutate() goes here %>%
print
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = 'passed')
failed <- mutate(failed, status = 'failed')
bind_rows(passed, failed)
sat
sat %>%
select(-contains('total'))# %>%
sat %>%
select(-contains('total')) %>%
gather(part_sex, count, -score_range) #%>%
sat %>%
select(-contains('total')) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, into = c('part','sex')) %>%
print
submit
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex)
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex"))# %>%
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count),
pror = count / total
) %>% print
submit()
Sys.getlocale("LC_TIME")
library(lubricate)
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label= TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd('1989-05-17')
my_date
class(my_date)
ymd('1989 Mat 17')
ymd('1989 May 17')
mdy('Бер 12, 1975')
mdy('March 12, 1975')
dmy(25081985)
ymd('192012')
ymd('1920/1/2')
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hour = hour(now()), minute = minute(now()))
this_moment <- update(this_moment, hour = hour(now()), minutes = minutes(now()))
this_moment <- update(this_moment, hour = hour(now()), minutes = minute(now()))
this_moment <- update(this_moment, hours = 17, minutes = 51, seconds = 0)
this_moment
nyc <- now(tzone = 'America/New York')
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, 'Asia/Hong_Kong')
arrive
last_time <- mdy("June 17, 2008", tz = 'Singapore')
last_time
?new_interval
how_long(last_time, arrive)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
10^6
library(knitr)
render('Storm Project.Rmd', "pdf_document")
cov(c(2,3,5,4,6), c(5,8,10,11,14))
cov(c(2,3,5,4,6), c(5,8,10,11,14),method = 'spearman')
cov(c(2,3,5,4,6), c(5,8,10,11,14),method = 'pearson')
cov(c(2,3,5,4,6), c(5,8,10,11,14),method = 'kendall')
cov(c(2,3,5,4,6), c(5,8,10,11,14))
x <- c(2,3,5,4,6)
y <- c(5,8,10,11,14)
cov(x,y)
mean(x)
mean(y)
mean(x*y)
mean(x*y)-mean(x)*mean(y)
x_n <- x-mean(x)
y_n <- y- mean(y)
cov(x_n, y_n)
mean(x_n*y_n)
??iris
library(datasets)
data(iris)
iris
iris$setosa <- ifelse(iris$Species == 'setosa')
iris$setosa <- ifelse(iris$Species == 'setosa', 'yes', 'no')
iris2 <- iris[,-5]
iris2$setosa <- as.factor(iris2$setosa)
logit <- glm(formula = setosa ~ ., data = iris2, family = binomial)
pred <- predict(object = logit, iris2, type = 'response')
y <- ifelse(pred >= 0.5,1,0)
table(y, iris2$setosa)
plot(pred)
View(iris)
iris <- iris[,-6]
sl <- c(7,6.4,6.9,5.5,6.5)
sw <- c(3.2,3.2,3.1,2.3,2.8)
cor(sl,sw)
cov(sl,sw)
mean(sl*sw) - mean(sl) * mean(sw)
var(sl)
(mean(sl*sw) - mean(sl) * mean(sw)) / sqrt(var(sl) * var(sw))
cor(iris)
cor(iris[,-5])
plot(Sepal.Length, Sepal.Width, data = iris, col = iris$Species)
plot(Sepal.Length ~ Sepal.Width, data = iris, col = iris$Species)
plot(Sepal.Length ~ Sepal.Width, data = iris, pch = iris$Species)
plot(Sepal.Length ~ Sepal.Width, data = iris, pch = iris$Species)
plot(Sepal.Length ~ Sepal.Width, data = iris, col = iris$Species)
k_mean <- kmeans(x = iris[,1:2],centers = 3,nstart = 100)
pch = k_mean$cluster)
table(iris$Species, k_mean$cluster)
iris$versi <- as.factor(ifelse(iris$Species == 'versicolor', 'yes', 'no'))
iris$virgi <- as.factor(ifelse(iris$Species == 'virginica', 'yes', 'no'))
iris$setosa <- as.factor(ifelse(iris$Species == 'setosa', 'yes', 'no'))
model_set <- glm(formula = setosa ~ Sepal.Length + Sepal.Width + Petal.Width + Petal.Width,
data = iris, family = binomial)
model_ver <- glm(formula = versi ~ Sepal.Length + Sepal.Width + Petal.Width + Petal.Width,
data = iris, family = binomial)
model_vir <- glm(formula = virgi ~ Sepal.Length + Sepal.Width + Petal.Width + Petal.Width,
data = iris, family = binomial)
pred_set <- predict(model_set, iris, type = 'response')
pred_ver <- predict(model_ver, iris, type = 'response')
pred_vir <- predict(model_vir, iris, type = 'response')
pred_data <- data.frame(pred_set, pred_ver, pred_vir)
apply(X = pred_data,MARGIN = 2, FUN = max)
apply(X = pred_data,MARGIN = 1, FUN = max)
pred_data$max <- apply(X = pred_data,MARGIN = 1, FUN = max)
pred_data$decision <- ifelse(pred_data$max == pred_data$pred_set, yes = 'setora',
no = ifelse(pred_data$max == pred_data$pred_ver, yes = 'ver', 'vir')
table(iris$Species, pred_data$decision)
View(pred_data)
pred_data$decision <- ifelse(pred_data$max == pred_data$pred_set, yes = 'setora',
no = ifelse(pred_data$max == pred_data$pred_ver, yes = 'ver', 'vir')
)
table(iris$Species, pred_data$decision)
View(pred_data)
library(tree)
library(rpart)
ir_tree <- tree(formula = Species ~ ., data = iris[,1:5],method = 'class')
plot(ir_tree)
ir_tree
ir_tree_pred <- predict(ir_tree, iris,type = 'class')
table(iris$Species,ir_tree_pred)
cv_ir <- cv.tree(ir_tree,FUN = prune_misclass)
cv_ir <- cv.tree(ir_tree,FUN = prune.misclass)
cv_ir
text(ir_tree, pretty = 0, cex = 0.7)
ir_part <- rpart(formula = Species ~ ., data = iris[,1:5], method = 'class')
plot(ir_part)
text(ir_part)
text(ir_part, pretty = 0, cex = 0.7)
plot(ir_part)
text(ir_part, pretty = 0, cex = 0.7)
library(ggplot2)
library(gg_dendro)
library(ggdendro)
ggdendrogram(data = ir_part)
ir_part_pred <- predict(ir_part, iris, type = 'class')
table(iris$Species, ir_part_pred)
library(datasets)
tree_den <- dendro_data(ir_part)
ggplot() +
geom_segment(data=tree_den$segments, aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=tree_den$labels, aes(x=x, y=y-1, label=label)) +
geom_text(data=tree_den$leaf_labels, aes(x=x, y=y-1, label=label)) +
theme_dendro()
library(kernlab)
guess <- c(1,2,2,3,3,2)
people <- data.frame(name = c('Bas','Eduardo','Eric','Felix','Joos','Wil'),
c(1,0,0,0,0,0), c(0.25,0,0,0.5,0.25,0), c(0,0.5,0.5,0,0,0),
c(0,0.25,0.25,0,0,0),c(0,0,0.25,0,0,0.25),c(0,0,0,0.25,0.5,0))
View(people)
clus <- kmeans(x = people[,-1], centers = 3,nstart = 100)
table(guess, culs$cluster)
table(guess, clus$cluster)
library(kernlab)
kern_clus <- kkmeans(as.matrix(people[,-1]), centers = 3)
as.matrix(people[,-1])
kern_clus <- kkmeans(as.matrix(people[,-1]), centers = 3)
kern_clus <- kkmeans(x = as.matrix(people[,-1]), centers = 3)
colMeans(as.matrix(people[,-1]))
matr <- matrix(nrow = 6,ncol = 6,byrow = FALSE,data = c(c(1,0,0,0,0,0), c(0.25,0,0,0.5,0.25,0), c(0,0.5,0.5,0,0,0),
c(0,0.25,0.25,0,0,0),c(0,0,0.25,0,0,0.25),c(0,0,0,0.25,0.5,0)),)
View(matr)
kern_clus <- kkmeans(x = matr, centers = 3)
table(guess, kern_clus)
rm(list = ls())
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x), x = slider(1,100))
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
data(galton)
??galton
library(dichromat)
data(dalton)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
??galton
rm(list = ls())
data(cars)
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(15,25))
install.packages("shiny")
library(shiny)
runApp(appDir = 'D:/Studu/Coursera/Developing Data Products/shiny/testApp')
runApp(appDir = 'D:/Study/Coursera/Developing Data Products/shiny/testApp')
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
p <- c(.1, .2, .3, .4)
x <- 2 : 5
m <- x*p
m
me <- sum(m)
me
(x-me)^2 * p
sum((x-me)^2 * p)
swirl()
library(swirl)
rm(list = ls())
swirl()
?InstallCourses
install_from_swirl('Statistical_Inference')
install_from_swirl('Regression_Models')
install_from_swirl('Exploratory_Data_Analysis')
install_from_swirl('Data_Analysis')
install_from_swirl('Mathematical_Biostatistics_Boot_Camp')
swirl()
1-3/36
deck
13*4
1/13
0
3/13
2/51
0.64
0.64
mypdf
integrate(f = mypdf, lower = 0,upper = 1.6)
8^0.5
2^0.5
mtcars
allMPG <- mtcars$mpg
allMPG
mean(allMPG)
sampMeanMPG <- mean(allMPG)
sampVarMPG <- var(allMPG)
n <- length(allMPG)
tStat <- (sampMeanMPG - 12.0) / sqrt(sampVarMPG/n)
myDF <- n-1
tStat
myDF
pVal1 <- pt(tStat,df = myDF,lower.tail = FALSE)
pVAl <- pVal1 * 2
pVal
t.test(allMPG, mu = 12.0, alternative = 'two.sided')
library(swirl)
swirl()
mtcars$am
auto <- mtcars[mtcars$am == 0,]
man <- mtcars[mtcars$am == 1,]
autoMPG <- auto$mpg
manMPG <- man$mpg
sampMeanAutoMPG <- mean(autoMPG)
sampMeanManMPG <- mean(manMPG)
nchar('================================')
diffSampMean <- sampMeanAutoMPG - sampMeanManMPG
diffSampMean <- -sampMeanAutoMPG + sampMeanManMPG
diffPopMean <- 0
sampVarAutoMPG <- var(autoMPG)
sampVarManMPG <- var(manMPG)
nAuto <- length(autoMPG)
nMan <- length(manMPG)
numer <- diffPopMean - diffSampMean
numer <- - diffPopMean + diffSampMean
denom <- sqrt(sampVarAutoMPG/nAuto + sampVarManMPG/nMan)
tStat <- numer / denom
myDF <-  (sampVarManMPG/nMan +
| sampVarAutoMPG/nAuto)^2 / ((sampVarManMPG/nMan)^2/(nMan - 1) +
| (sampVarAutoMPG/nAuto)^2/(nAuto - 1))
myDF <-  (sampVarManMPG/nMan + sampVarAutoMPG/nAuto)^2 / ((sampVarManMPG/nMan)^2/(nMan - 1) + (sampVarAutoMPG/nAuto)^2/(nAuto - 1))
tStat
myDF
pVal1 <- pt(tStat,df = myDF,lower.tail = FALSE)
pVal <- 2* pVal1
pVal
t.test(autoMPG,manMPG,alternative = 'two.sided',paired = FALSE)
sigma <- 10
delta <- 5
zAlpha <- qnorm(p = 0.95,mean = 65,sd = sigma)
zAlpha <- qnorm(p = 0.95)
quit
quit()
library(devtools)
install.packages("devtools")
library(devtools)
library(devtools)
find_rtools()
find_rtools()
library(devtools)
install_github("ramnathv/rCharts@dev")
install.packages('base64enc')
install_github("ramnathv/rCharts@dev")
library(rCharts)
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd = 3, col = 'red')
summary(regrline)
zBeta <- qnorm(0.2)
(sigma / delta)^2 * (zAlpha - zBeta)^2
effectSize <- (sigma / delta)^2 * (zAlpha - zBeta)^2
effectSize <- delta / sigma
pwr.norm.test(d=effectSize, sig.level=0.05, power=0.80, alternative="greater")
pwr.t.test(d=effectSize, sig.level=0.05, power=0.80, type="one.sample",
| alternative="greater")
pwr.t.test(d=effectSize, sig.level=0.05, power=0.80, type="one.sample",alternative="greater")
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs-rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag + dist, attenu)
mean(efit$residuals)
cov(attenu$mag, efit$residuals)
cov(attenu$disy, efit$residuals)
cov(attenu$dist, efit$residuals)
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2)/(length(fit$residuals)-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- sum((galton$child - lm(child ~ parent, galton)$fitted.values))
sRes <- deviance(fit)
sRes / sTot
1 - sRes / sTot
summary(fit)$r.squared
(cor(galton$child, galton$parent))^2
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ . - 1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
View(trees2)
fit2 <- lm(Volume ~ . -1, trees2)
lapply(list(fit,fit2), coef)
3.5
expect_dice
dice_high
mean(expect_dice(dice_high))
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh + edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
library(devtools)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='azhubryd', token='66011E44D5AD7D94E319F25F2C3E61E0', secret='WfmGFcoI3k7qgYzvhdgom7c8mU1cQM9rTKS2RKPF')
library(shinyapps)
setwd('D:/Study/Coursera/Developing Data Products/Project')
rm(list = ls())
require(shiny)
require(shinyapps)
ggplot2::ggplot(iris, Sepal.Width ~ Sepal.Length)
ggplot2::qplot(Sepal.Width ~ Sepal.Length, iris)
ggplot2::qplot(x = Sepal.Width, y = Sepal.Length, iris)
View(iris)
shinyapps::deployApp(appName = 'BMI Calculator')
shinyapps::deployApp(appName = 'BMI Calculator')
shinyapps::deployApp(appName = 'BMI_Calculator')
swirl
swirl::swirl()
setwd('~')
cumsum(1:10)
cumprod(1:10)
cummax(1:10)
cummax(c(5,1,2,3,4,9,6,7,8,12,1,11,120,33))
pnorm(70,mean = 80,sd = 10,lower.tail = T)
pnorm(70,mean = 80,sd = 10,lower.tail = T,log.p = T)
ln(pnorm(70,mean = 80,sd = 10,lower.tail = T))
log(pnorm(70,mean = 80,sd = 10,lower.tail = T),base = 2)
log(pnorm(70,mean = 80,sd = 10,lower.tail = T))
qnorm(0.95,mean = 1100,sd = 75)
qnorm(0.95,mean = 1100,sd = 7.5)
pbinom(q = 4:5,size = 5,prob = 0.5)
pbinom(q = 4,size = 5,prob = 0.5)
pbinom(q = 0:5,size = 5,prob = 0.5)
1-pbinom(q = 0:5,size = 5,prob = 0.5)
pnorm(q = 14, mean = 15, sd = 1)
pnorm(q = 16, mean = 15, sd = 1)
pnorm(q = 16, mean = 15, sd = 1)-pnorm(q = 14, mean = 15, sd = 1)
ppois(q = 10,lambda = 3*5)
qnorm(0.95, 1100, 7.5)
pbinom(4,size = 5,prob = 0.5,lower.tail = FALSE)
pbinom(0,size = 2,prob = 0.5,lower.tail = FALSE)
pbinom(0,size = 2,prob = 0.5)
pbinom(1,size = 2,prob = 0.5)
pbinom(3,size = 5,prob = 0.5,lower.tail = F)
dbinom(4:5,5,0.5)
plot(funtion(x) {x^2})
plot(function(x) {x^2})
plot(function(x) {x^2}, xlim = c(-10,10))
plot(x_2 <- function(x) {x^2}, xlim = c(-10,10))
plot(function(x) {x^2}, xlim = c(-10,10))
plot(function(x) {x^2}, xlim = c(-10,10), ylab = 'x^2')
plot(function(x) {x^2}, xlim = c(-10,10), ylab = expression('x^2')
)
plot(function(x) {x^2}, xlim = c(-10,10), ylab = )
expression('x^2')
expression('x',^2)
plot(function(x) {x^3}, xlim = c(-5,5))
plot(function(x) {x^3}, xlim = c(-5,5), ylab = 'x^3')
plot(function(x) {x^3}, xlim = c(-5,5), ylab = 'y = x^3')
points(function(x) {x^2}, type = 'l')
lines(function(x){x^2})
lines(x = seq(-5,5,by = 0.01), y = seq(-5,5,by = 0.01),type = 'l')
lines(x = seq(-5,5,by = 0.01), y = seq(-5,5,by = 0.01)^2,type = 'l')
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
plot(M) # Just to see and play
cities2 <- data.frame(City = c('Kyiv','Kharkiv','Odesa','Dnipropetrovsk','Donetsk','Zaporizhia','Lviv','Kryvyi Rih'),
Population = c(2868702,1451132,1017022,993094,949825,766268,729038,652137),
Misto = c('РљРёС—РІ','РҐР°СЂРєС–РІ','РћРґРµСЃР°','Р”РЅС–РїСЂРѕРїРµС‚СЂРѕРІСЃСЊРє','Р”РѕРЅРµС†СЊРє','Р—Р°РїРѕСЂС–Р¶Р¶СЏ','Р›СЊРІС–РІ','РљСЂРёРІРёР№ Р С–Рі'))
plot(gvisGeoChart(cities2, locationvar = 'City', sizevar = 'Population', colorvar = 'Population',
options = list(region = 'UA', displayMode = 'markers')))
setwd('D:/Study/Coursera/Developing Data Products/Project')
rm(list = ls())
require(shiny)
getwd()
runApp('shiny/GraphApp')
runApp('shiny/graphApp')
runApp('../shiny/graphApp')
